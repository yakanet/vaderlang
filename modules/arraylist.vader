@load "std"

List :: struct {
    data:   []u32
    length: u32
}

create_list :: fn(initialCapacity : u32) -> List {
    //x :: [3]List
    return List {
        .data   = [initialCapacity]u32,
        .length = 0,
    }
}

at :: fn(this : List, index: u32) -> u32 {
    // TODO Handle exception
    return this.data[index]
}

// TODO use memcopy
grow :: fn(this: List) -> void {
    data :: [this.data.length() * 2]u32
    for (i := 0; i < this.length; i = i + 1) {
        data[i] = this.data[i]
    }
    this.data = data
}

push :: fn(this: List, item: u32) {
    if this.length >= this.data.length() {
        grow(this)
    }
    this.data[this.length] = item
    this.length = this.length + 1
}

empty :: fn(this: List) -> boolean {
    return this.length == 0
}

pop:: fn(this: List) -> u32 {
    this.length = this.length - 1
    return this.data[this.length]
}