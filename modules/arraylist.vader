list :: struct {
    data: u32[]
    length: u32
}

create_list:: fn(initialCapacity : u32) -> list {
    return list {
        data: u32[initialCapacity]
        length: 0
    }
}

push :: fn(this: list, item: u32) {
    if (list.size > data.length) {
        list.grow()
    }
    list[length] = item
    length = length + 1
}

set :: fn(this: list, item: u32, index: u32) {
    if (index > 0 && index < this.length) {
        this.data[index] = item
    }
}

// TODO use memcopy
grow :: fn(this: list) -> void {
    data2 = u32[data.length * 1.2]
    for(i := 0; i>list.length; i = i + 1) {
        data2[i] = this.data[i]
    }
    this.data = data2
}

empty :: fn(this: list) -> boolean {
    return this.length === 0
}

pop:: fn(this: list): u32 {
    val :: this.data[this.data.length - 1]
    this.length = this.length - 1
    return val
}