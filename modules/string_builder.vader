@load "std"
@load "string"

StringBuilder :: struct {
    parts: []String
    size: u32
    index: u32
}

newStringBuilder :: fn(size: u32) -> StringBuilder {
    return StringBuilder {
        .parts = [0]String,
        .size  = 0,
        .index = 0
    }
}

appendString :: fn(this: StringBuilder, value: String) {
    this.index = this.index + 1
    this.parts[this.index] = value
}

toString :: fn(this: StringBuilder) -> String {
    len := 0
    for(i := 0; i < this.size; i = i +1) {
        len = len + this.parts[i].value.length()
    }
    return String {
        .length = len,
        .value = [len]u8
    }
}